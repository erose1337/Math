a = 3
p = 17

<--- s = 0 ... 5 ----> = p / a

0   3   6   9   12  15    /|\
1   4   7   10  13  16     |  e = 0 ... 2 = p % a
2   5   8   11  14        \|/

0 has twice the chance of being output as any other element
    - reject (s = 0, e = 0)?
        - with sizeable parameters, (s = 0, e = 0) has negligible probability of being generated
        
        
        
a = 3
p = 17
s_lsb = 1

Each element is output twice

0   3       9       15
    4       10      16
    5       11      
        
    
    
a = 4
p = 17
s_lsb = 1

    4       12
1   5       13
2   6       14
3    
    
    
    
    
    
  
a = 3
p = 17
e_lsb = 1
  
    3   6   9   12  15
1   4   7   10  13  16    row is repeated twice
                          row is completely absent
                          
                          
a = 4
p = 17
e_lsb = 1

0   4   
1   5   9   13                            
2   6
3   7   11  15    
    
    
a = 4
p = 19
e_lsb = 1

0   4
1   5   9   13  17     row is repeated twice
2
3   7   11  15    


a = 4
p = 19
e_msb = 1
    
0   4    
    
2   6   10  14  18
3   7   11  15    
    

     
(a+b)2-(a-b)2 = 4ab         (https://sites.google.com/site/tpiezas/005b)
4pq = (p + q)^2 - (p - q)^2
4N  = (p + q)^2 - (p - q)^2
      (p + q)(p + q) - (p - q)(p - q)
      (pp + pq + pq + qq) - (pp - pq - pq + qq)
      (pp + pq + pq + qq) - pp + pq + pq - qq
      pq + pq + pq + pq
      
      
Squares are always congruent to 0, 1, 4, 5, 9, 16 modulo 20 (https://en.wikipedia.org/wiki/Fermat%27s_factorization_method)      

Search for nx + y^2






0   1   2
3   4   5
6   7   8
9   10  11
12  13  14
15  16







 a * s           64 32
(p * q + r)      32 32     32


a * s mod (p * q) + a     
x mod (p * q) + a    
x mod t + a      ((x / t) * a) 
                    y * a
                 a * s - a * y
                 a * s - y
                    
                    
                    
                    
                    
                    
 a * s       64  16
 p * q + r   32  32  32
 
 
 
 
 
 
 
 
 a * b

a + a + a + a + a + a
^----a, b times-----^

a^-1(a + a + a + a + a + a)
     ^----ab * a^-1------^
1 + 1 + 1 + 1 + 1 + 1
^------ = b---------^


a^b

a * a * a * a * a * a
^----a, b times-----^

a^-1(a * a * a * a * a * a)






g^x = g * g * g * g * g * g * g * g * g
g^3 = g * g * g

gcd(x, 3) == 3







#aa - bb
#(a + b) * (a - b)
#aa - ba + ba - bb
#aa - bb == (a + b) * (a - b)

#x + 1 * x - 1 == xx - 1
#x + 2 * x - 2 == xx - 4
#x + 3 * x - 3 == xx - 9
#x + 4 * x - 4 == xx - 16
#x + 5 * x - 5 == xx - 25
#x + 6 * x - 6 == xx - 36
#x + 7 * x - 7 == xx - 49


1   4   9   16   25   36   49   64   81   100
  3   5   7    9    11   13   15   17   19
         
        
1    4    9    16    25    36    49    64    81    100
   3    5    7     9    11    13    15    17    19
     8    12    16   
       15    21    27
          24    32    40
             35    45    55
                48    60    72
                   63    77    91
                      80    96
                         99
  
#(x + x + 1) * (x - x + 1)
# (xx - xx + x) + (xx - xx + x) + (x - x - 1)
# x + x - 1
# 2x - 1

#(x + y) * (x - y)
#(x + y + 1) * (x - y + 1)
#xx - xy + x + xy - yy + y + x - y - 1
#xx + -1xy + x + xy + -1yy + y + x + -1y + -1
#xx + x + -1yy + y + x + -1y + -1
#xx + x - yy + x - 1
#xx + 2x - yy - 1



# for odd z
# x = (z - 1) / 2
# y = x + 1
# yy - xx = z
# x + y * x - y = z






# xxxx - yyyy
# xx + yy * xx - yy
# xxxx + xxyy - xxyy - yyyy
# xxxx - yyyy


# x - y * x - y
# xx - xy - xy - yy
# xx - 2xy - yy


# xx - yy * xx - yy
# xxxx - xxyy - xxyy - yyyy
# xxxx - 2xxyy - yyyy




# x^2 mod n = y^2
# nr - x^2 = y^2
# n^2 - x^2 = y^2
# n^2 = x^2 + y^2







#aa - bb == (a + b) * (a - b)
#ai(a + b) * (a - b)
#1 + aib * (a - b)
#a - b + b - aibb
#a - aibb

#aa - bb
#ai(aa - bb)
#a - aibb

#bi(a - aibb)
#abi - aib




#av + bw
#ax + by

#ai(av + bw)
#v + aibw
#bi(v + aibw)
#biv + aiw

#av + bw

# v     w
#--- + ---
# b     a


#ax + by
#xi(ax + by)
#a + xiby
#yi(a + xiby)
#ayi + bxi






0 a b
c d e
f g h

q = 10


0 3 6 9
1 4 7 10
2 5 8 11

0 5 10
3 8

0
  3 6 9
  2 5 8
  1 4 7
  
  
  
q = 24
g = 5

0 5 10 15 20
1 6 11 16 21
2 7 12 17 22
3 8 13 18 23
4 9 14 19   




# e * d - 1 == (p - 1) * (q - 1)
# e * d - 1 == p * q * x + r
# log(r) == log(p)

# e * d = p * q * x + r + 1

# d = p * q * x + r + 1
#      ----------
#           e
            
            
            
a^2p == b^2 + c^2 where p = 4n + 1
                            2^2n + 1
                            
(a^2 + b^2) * (c^2 + d^2) == e^2 + f^2                                        





a^2 / 2a = a / 2 # result due to Mick










choice(k, a, b) XOR choice(k, b, a) = a XOR b
choice(k, a, b) AND choice(k, b, a) = a AND b
choice(k, a, b) + choice(k, b, a) = a + b
choice(k, k * a, k * b) + choice(k, b * k, a * k) = (a * k) + (b * k)












a = 3
p = 17

0   3   6   9   12  15   
1   4   7   10  13  16   
2   5   8   11  14       



a = 4
p = 17

0   4   8   12  16
3   7   11  15
2   6   10  14
1   5   9






there are n possible permutations of sequences mod n

how many are reachable by addition, multiplication, exponentiation, etc?




(1, n), (-1, -n) are factors of n
(p - n) * (p - 1) mod p == n

(pp - p - np + n)
p(p - n - 1) + n






subset sum

0   1   2   3   4   ...     n      given a set of elements
    |       |               |
    x       y               z      select a subset of them
    
    x + y + z + ...                and sum the subset
    

scaled subset sum                  

0   1   2   3   4   ....    n      given a set of elements
    |       |               |
    x       y               z      select a subset of them
    
    r(x + y + z + ...)             sum the subset, then multiply times a random scalar


subset sum -> inner product
                         
0   1   2   3   4   ...     n      given a set of scalars
    |       |               |
    a       b               c      select a subset of the scalars
    
    a, b, c                        use the subset as a basis vector
    
    x, y, z                        generate a random vector (array of scalars)
    
    ax + by + cz + ...             compute the inner product of the subset vector and random vector
    
    
subset sum+ -> inner product            

0   1   2   3   4   5   6   ...        n   given a set of scalars
    |   |   |   |   |   |              
    a   d   b   c   e   f              select and N subsets of the scalars
                                       
    a + b + c, d + e + f, ...          sum each subset
    
    x, y, z, ...                       generate a k-length random vector (k = length of subset)
    
    x(a + b + c) + y(d + e + f) + ...  compute the inner product of the random vector and subset sums
    
    
    
    
    
    
    
g^x * g^1/x = g^(x * 1/x) = g^1

g^3x * g^1/x = g^(3x * 1/x) = g^3

g^15 * g^1/5 = g^(15 * (1/5)) = g^3



(b * c)^n = b^n * c^n

(b^k * bi)^n = b^kn * bi^n = 











pq = x^2 + 5y^2
pq - 5y^2 = x^2
(pq - 5^2)^1/2 = x

pq - x^2 = 5y^2
pq - x^2
-------- = y^2
    5
    
    
        
        
        
        
        
        
        
if p is congruent to 1 mod 4, then p = a^2 + b^2 (fermat)
if q is congruent to 1 mod 4, then q = c^2 + d^2 (fermat)
the product of two sums of two squares is a sum of two squares: p * q = (a^2 + b^2) * (c^2 + d^2) = e^2 + f^2 (brahmagupta-fibonnaci identity)
there are sqrt(p) values x such that x^2 is smaller than p 

(a^2 + b^2) * (c^2 + d^2) = (ac - bd)^2 + (ad + bc)^2
                          = (ac + bd)^2 + (ad - bc)^2
                          
                          
                          
                          
                          
sum(1 + 2k for k in range(n)) == n ** 2
1 + (2 * (n - 1))
1 + 2n - 2
2n - 1

1   3   5   7   9   11  13 
1   3   5   7   9   11  13  15  17
1   3   5   7   9   11  13  15  17  19 21

# count how many elements there are
#   ((2n - 1) / 2) + 1 
#       == n
# count how many pairs there are
#   ((2n - 1) / 2) + 1) / 2  
#       n / 2
# check for odd/middle element
#   (((2n - 1) / 2) + 1) % 2
#       n % 2
# middle element value:
#   ((2n - 1) / 2) + 1
#       n
# multiply number of pairs by sum of largest + smallest element
# largest: (2n - 1)
# smallest: 1
# sum: 2n
# if no middle element:
#    output 2nn / 2
#
# if middle element:
#    output n * (((2n - 1) / 2) + 1) + ((2n - 1) / 2) + 1           




            
Is there a hard problem related to `msb(ab mod q)` for fixed secret a, q and random b

x mod q = qr - x

qr > x

                          
                          
((n / 2) + 1) ^ 2 - ((n / 2) ^2) = n                  

aa - bb
(a + b) (a - b)
aa - ab + ab - bb == aa - bb


(n / 2) + 1 - (n / 2)
((n / 2) + 1 + (n / 2)) * ((n / 2) + 1 - (n / 2))







k(x + y + z) mod q       x + y + z mod 2^k == m


x + y + z mod 2^k = m
-   -   -
a   b   c


bcx + acy + abz = x + y + z 
---------------   -   -   -
    abc           a   b   c
                        
       

k(x + y + z) mod q2^n




(a2^n) + 1  (b2^n**2) + 1    (c2^n**3) + 1




x + y + z  = m


 x    y    z
| |  | |  | |
 c    f    i
 +    +    +
 b    e    h
 +    +    +
 a    d    g
 
 
 
 
 
 c    f    i         
 +    +    +        
 b    e    h
 +    +    +  --->  shuffle
 a    d    g
 +    +    +
 r0   r1   r2
 
 
 
 
 
 
x + y = m mod q

k1x, k2y 


k1 * k2 = d mod q
x + y = m mod q

k1^-1x + k2^-1y
















imaginary units in modular arithmetic
-----

The imaginary unit is the square root of -1
[The imaginary unit or unit imaginary number (i) is a solution to the quadratic equation x2 + 1 = 0](https://en.wikipedia.org/wiki/Imaginary_unit)
i^n = i^(n mod 4)
So there are two square roots of -1: i and -i
the defining equation x^2 = âˆ’1 has two distinct solutions, which are equally valid and which happen to be additive and multiplicative inverses of each other

Select some modulus n
-1 == nx - 1
sqrt(nx - 1) = i


pick some imaginary unit k
generate n: n = k^2 + 1



(a^2 + b^2) = (a + bi) * (a - bi)
              aa - abi + abi - bbii
              aa + bb
              
(a^2 - b^2) = (a + bii) * (a + b)
               aa + ab + abii + bbii
               aa + ab - ab - bb
               aa - bb
               
i^2 is a square root of 1
    - is a trivial square root of 1 (= -1)





can distribution of exponents be used to speed up any calculations
        

a^2 + bi^2 = c^2
5^2 + 3i^2 = 4^2
25 - 9 = 16




a^3 âˆ’ b^3 = (a âˆ’ b)(a^2 + ab + b^2)









Coxeter's "murder weapon": "If ap=bq=cr=abc=1ap=bq=cr=abc=1 defines a finite group, then ap=bq=cr=abc=zap=bq=cr=abc=z implies z2=1z2=1."



k = (a^2 + b^2)/(ab + 1)           is a square if k is an integer





n - 1 is congruent to p - 1 mod p and q - 1 mod q (where n = pq)









(x/n) * e

(p - 1) * (q - 1)
pq - p - q + 1

(x/pq) * (-p - q + 1)
(x/pq) * -1(p + q - 1)

-1(x/q + x/p - x/pq)

-x/q - x/p + x/pq

x/pq - x/q - x/p

t = pow(m, e)
error = ((t/n) * p) + ((t/n) * q) - t/n
c = t mod n
c = t - error mod totient(n)



for prime n > 0:
totient(2^n) = 1 * 2^(n - 1)
totient(3^n) = 2 * 3^(n - 1)   
totient(5^n) = 4 * 5^(n - 1)
totient(7^n) = 6 * 7^(n - 1)
totient(11^n) = 10 * 11^(n - 1)
...
totient(p^n) = (p - 1) * p^(n - 1)

    
    
    
c^n - b^n is not a power of n for n >= 3
c^n - b^n does not have an nth root in integers



a^2 + b^2 = c^2
(a + b)^2 - 2ab = c^2



(a + b)(a + b)(a + b)
(aa + 2ab + bb)(a + b)

aaa + 2aab + abb + aab + 2abb + bbb
aaa + 3aab + 3abb + bbb
(a + b)^3 - 3aab - 3abb = aaa + bbb







2   3   4   5   6   7   8   9   10  11  12  13  14  15  16

2 * 4 * 8 * 16 = 2^1 * 2^2 * 2^3 * 2^4 = 2^(1 + 2 + 3 + 4) = 2^((n * (n + 1)) / 2)


    3       5   6   7       9   10  11  12  13  14  15
    
 (2^k)-1      (2^k)-1               (2^k)-1
 
 2^(1.5)
 2^(((2^2) - 1) + i(1.0/((2^(2 - 1)) - 1)))    i = 1, 2, 3, ... (2^k) - 1
 2^(((2^k) - 1) + i(1.0/((2^(k - 1)) - 1)))    1x + 2x + 3x + 4x + 5x ... + ((2^k) - 1)x
                                              x * ((n * (n + 1)) / 2) ; n = (2^k) - 1
                                              x = 1.0/((2^(k - 1)) - 1)
                                              ((2^k) - 1) * (1.0/((2^(k - 1)) - 1))
 2^(((2^(k - 1)) - 1) + x(1.0/((2^(k - 1)) - 1)))
            

number of elements between 2^k and 2^(k - 1) = 2^(k - 1) - 1
exponent fraction per element = 1.0/(number of elements + 1) OR log((2^k) - 1, 2)
sum of exponent fractions = exponent fraction per element * ((number of elements * (number of elements + 1)) / 2)
sum of exponents = (k - 1) * ((number of elements * (number of elements + 1)) / 2)
exponent = sum of exponents + sum of exponent fractions
value = 2^exponent


            
            
            
1   2
1 2     2       x

1   2   3
1 3     3       x
2       2       x - 1


1   2   3   4
1 4     4       x                                   x
2 3     6       x + x - 2                           2x - 2


1   2   3   4   5
1 5     5       x
2 4     8       x + x - 2
3       3       x - 2


1   2   3   4   5   6
1 6     6       x                                   x
2 5     10      x + x - 2                           2x - 2
3 4     12      x + x + x - 2 - 4                   3x - 6


1   2   3   4   5   6   7
1 7     7       x
2 6     12      x + x - 2
3 5     15      x + x + x - 2 - 4
4       4       x - 3


1   2   3   4   5   6   7   8
1 8     8       x                                   x
2 7     14      x + x - 2                           2x - 2
3 6     18      x + x + x - 2 - 4                   3x - 6
4 5     20      x + x + x + x - 2 - 4 - 6           4x - 12


1   2   3   4   5   6   7   8   9

1 9     9       x
2 8     16      x + x - 2
3 7     21      x + x + x - 2 - 4
4 6     24      x + x + x + x - 2 - 4 - 6
5       5       x - 4


1   2   3   4   5   6   7   8   9   10
1 10    10      x                                   x
2 9     18      x + x - 2                           2x - 2
3 8     24      x + x - 2 + x - 4                   3x - 6
4 7     28      x + x - 2 + x - 4 + x - 6           4x - 12
5 6     30      x + x - 2 + x - 4 + x - 6 + x - 8   5x - 20


x (x + x - 2)(x + x - 2 + x - 4)(x + x - 2 + x - 4 + x - 6)(x + x - 2 + x - 4 + x - 6 + x - 8)
x(2x - 2)(3x - 6)(4x - 12)(5x - 20)



x(2x - 2) = 2xx - 2x
          = 2(xx - x)
          
x(2x - 2)(3x - 6) = (2xx - 2x)(3x - 6) = 6xxx -12xx - 6xx + 12x = 6xxx - 18xx + 12x
                                                                = 6(xxx - 3xx + 2x)
                                                                
x(2x - 2)(3x - 6)(4x - 12) = (6xxx - 18xx + 12x)(4x - 12) = 24xxxx - 72xxx - 72xxx + 216xx + 48xx - 144x = 24xxxx - 144xxx + 264xx - 144x
                                                                                                         = 24(xxxx - 6xxx + 11xx - 6x)
                                                                                                         
x(2x - 2)(3x - 6)(4x - 12)(5x - 20) = (24xxxx - 144xxx + 264xx - 144x)(5x - 20) = 120xxxxx - 480xxxx - 720xxxx + 2880xxx + 1320xxx - 5280xx - 720xx + 2880x
                                                                                = 120xxxxx - 1200xxxx + 4200xxx - 6000xx + 2880x
                                                                                = 120(xxxxx - 10xxxx + 35xxx - 50xx + 24x)
(x/2) - (((x/2) - x) * ((x/2) - 2x))

            
            
            
            
    x^2
        
  x   -x            


     x^4
    
  x^2   -x^2
  
x  -x   xi  -xi



                 x^8
       x^4               -x^4
    x^2  -x^2      (x^2)i    -(x^2)i
  x -x   xi -xi   x?
                                   
                                   
                                   
                                   
                                   
                                   
                                   
                                   
                                   
                                   
(a^2 + b^2) * (c^2 + d^2) the product of two sums of two squares is a sum of two squares (brahmagupta-fibonacci identity)

f(x) = {1 if x is a sum of two squares}             
       {0 if x is not a sum of two squares}
 is there an efficient algorithm for evaluating f(x)?       
       
#1. f((a^2 + b^2)^n) == 1:
        (a^2 + b^2)^2 == (a^2 + b^2) * (a^2 + b^2); f((a^2 + b^2)^2) == 1;
        (a^2 + b^2)^3 == (a^2 + b^2)^2 * (a^2 + b^2); f((a^2 + b^2)^3) == 1;
        ...
    
If g is a generator of a multiplicative group, and f(g) == 1, then f(x) == 1 for all elements x generated by g

For f(x) == 1, if x^-1 is the multiplicative inverse of x modulo some prime P, then f(x^-1) == 1
    x^-1 = x^(p - 2) mod p = x^n
    by #1 f(x^n) == 1
    
If f(x) == 1 and f(x^-1) == 1, then f(1) == 1
    x * x^-1 mod P = 1    
    
f(x) = 1, f(y) = 0
f(x * x) = 1
f(x * y) = 0             
f(y * x) = 0               
f(y * y) = 0

is x * y guaranteed to not be a sum of two squares?
    do there exist values y, z such that f(y) == 0, f(z) == 0, and f(y * z) == 1?

(aa + bb)(cc + dd) = (ac - bd)^2 + (ad + bc)^2
                   = (ac + bd)^2 + (ad - bc)^2
                   
                   
                   
                   
                   
g^(x + 1) = (g - 1)g^x + g^x
2^(4 + 1) = (2 - 1)2^4 + 2^4 = 2^4 + 2^4 = 16 + 16 = 32 = 2^5
3^(3 + 1) = (3 - 1)3^3 + 3^3 = (2)3^3 + 3^3 = 2 * 27 + 27 = 54 + 27 = 81 = 3^4

g^x = (g - 1)g^(x - 1) + g^(x - 1)
g^(x - 1) = (g - 1)g^(x - 2) + g^(x - 2)
g^(x - n) = (g - 1)g^(x - n - 1) + g^(x - n - 1)




"If n has two distinct expressions as a sum of two squares, n=a2+b2=c2+d2, then n divides (ac+bd)(acâˆ’bd)." (https://math.stackexchange.com/a/1177886)
"For a number n which is a product of two large primes of the form 4k+1, if we can find two really different representations, then we can efficiently factor n." (https://math.stackexchange.com/questions/1299115/on-splitting-a-number-as-the-sum-of-two-squares#comment2638103_1299115)

              
              
              
if x^2 == y^2 mod N, then (xz)^2 == 1 mod N where z = 1/y
2x^2 * 2y^2 = 4z^2 = w^2 = (x^2 + x^2)(y^2 + y^2) = (x^2y^2 - x^2y^2)^2 + (x^2y^2 + x^2y^2)^2
2x^2 * 2x^2 = 4x^4 = y^2



f(x, y) -> x^2 + y^2
f(x + 1, y) -> (x + 1)^2 + y^2 = x^2 + 2x + 1 + y^2
f(x + 2, y) -> (x + 2)^2 + y^2 = x^2 + 4x + 4 + y^2
f(x + n, y) -> (x + n)^2 + y^2 = x^2 + 2nx + n^2 + y^2

f(x - 1, y) -> (x - 1)^2 + y^2 = x^2 - 2x + 1 + y^2
f(x - 2, y) -> (x - 2)^2 + y^2 = x^2 - 4x + 4 + y^2
f(x - n, y) -> (x - n)^2 + y^2 = x^2 - 2nx + n^2 + y^2

f(x * 2, y) -> (2x)^2 + y^2 = 4x^2 + y^2
f(x * 3, y) -> (3x)^2 + y^2 = 9x^2 + y^2
f(x * n, y) -> (nx)^2 + y^2 

f(x^2, y) -> (x^2)^2 + y^2 = x^4 + y^2
f(x^3, y) -> (x^3)^2 + y^2 = x^6 + y^2
f(x^n, y) -> (x^n)^2 + y^2 = x^(2n) + y^2

f(f(x, y), y) -> (x^2 + y^2)^2 + y^2 = (x^2 + y^2)(x^2 + y^2) + y^2
                                     = x^4 + 2(xy)^2 + y^4 + y^2
f(f(f(x, y), y), y) -> (x^4 + 2(xy)^2 + y^4 + y^2)^2 + y^2 = (x^4 + 2(xy)^2 + y^4 + y^2)(x^4 + 2(xy)^2 + y^4 + y^2) + y^2
                                                           = x^8 + 2x^6y^2 + (xy)^4 + x^4y^2 + ...
                         
                         
z^2 * f(x, y) -> (xz)^2 + (yz)^2                         
                                     
f(x, y) -> element of infinite multiplicative monoid?





https://en.wikipedia.org/wiki/Sum_of_squares_function
"The number of ways to write a natural number as sum of two squares is given by r2(n). It is given explicitly by
        
    r2(n) = 4(d1(n) - d3(n))

where d1(n) is the number of divisors of n which are congruent with 1 modulo 4 and d3(n) is the number of divisors of n which are congruent with 3 modulo 4."





1^3 + 2^3 + 3^3 + ... n^3 == (1 + 2 + 3 + ... + n)^2






k + m = n
(a - b) + 2b = a + b

k^2 + m^2 = n^2
(a - b)(a - b) + m^2 = (a + b)(a + b)
aa - ab - ab + bb + m^2 = aa + ab + ab + bb
aa - 2ab + bb + m^2 = aa + 2ab + bb
m^2 = 4ab
aa - 2ab + bb + 4ab = aa + 2ab + bb
aa + 2ab + bb = aa + 2ab + bb


k^3 + m^3 = n^3
(aa - 2ab + bb)(a - b) + m^3 = (aa + 2ab + bb)(a + b)
aaa - 2aab + abb - aab + 2abb - bbb + m^3 = aaa + 2aab + abb + aab + 2abb + bbb
aaa - 3aab + 3abb - bbb + m^3 = aaa + 3aab + 3abb + bbb
m^3 = 6aab + 2bbb





for prime p > 2, p is congruent to either 1 mod 4 or 3 mod 4
p = 1 mod 4, f(p) = 0
p = 3 mod 4, f(p) = 1

f(n): n mod 4
f(p) = 0, f(q) = 0: f(pq) = 0
f(p) = 0, f(q) = 1: f(pq) = 1
f(p) = 1, f(q) = 0: f(pq) = 1
f(p) = 1, f(q) = 1: f(pq) = 0




